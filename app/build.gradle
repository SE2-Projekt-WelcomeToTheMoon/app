plugins {
    alias(libs.plugins.androidApplication)
    id 'jacoco'
    id "org.sonarqube" version "4.4.1.3373"
}

android {
    namespace 'com.example.se2_projekt_app'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.se2_projekt_app"
        minSdk 29
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // --Hinzufügen--
    testOptions {
        unitTests.all {
            useJUnitPlatform()
            finalizedBy jacocoTestReport
        }
        unitTests.returnDefaultValues = true
    }
}
// --Hinzufügen-- + Überprüfen, ob xml.destination Path korrekt ist
tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'

    reports {
        xml.required = true
        xml.destination file("${project.projectDir}/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml")
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${project.layout.buildDirectory.get().asFile}/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = files("${project.layout.buildDirectory.get().asFile}/jacoco/testDebugUnitTest.exec")
}

// Sonarqube-Werte müssen von Sonarcloud unter Gradle kopiert werden. Diese sind individuell
// --Hinweis-- Darauf achten, dass Jacoco mitkopiert wird
sonar {
    properties {
        property "sonar.projectKey", "SE2-Projekt-WelcomeToTheMoon_app"
        property "sonar.organization", "se2-projekt-welcometothemoon"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.projectDir}/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        property "sonar.coverage.exclusions",
                "**/enums/*.java, **/ActionValues.java," +
                        " **/JSONKeys.java, **/responsehandler/*.java, **/SendMessageService.java," +
                        "**/WebSocketClient.java, **/screens/*.java, **/MainActivity.java," +
                        "**/LobbyManager.java, **/views/*.java, **/networking/json/FieldUpdateMessage.java, **/game/GameBoardManager.java";
    }
}

dependencies {
    implementation libs.activity
    implementation libs.appcompat
    implementation libs.material
    implementation libs.constraintlayout
    implementation libs.okhttp
    implementation libs.androidx.junit
    implementation libs.androidx.core
    implementation libs.androidx.espresso.core
    implementation libs.androidx.espresso.intents
    implementation libs.jackson.base
    implementation libs.jackson.databind
    implementation libs.android
    implementation libs.core
    implementation libs.androidx.drawerlayout
    implementation 'com.squareup.okhttp3:okhttp:4.9.2'
    testImplementation libs.junit
    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
    testImplementation libs.json
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
}